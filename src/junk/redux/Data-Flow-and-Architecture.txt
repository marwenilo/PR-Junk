// One-way direction data flow is the idea that the components do not modify the data that they receive. 
// They only listen for changes in​ this data and maybe provide the new value but they do not update the actual data. 
// This update happens following another mechanism, 
// in another place and the component just gets re-rendered with the new value, if any.

// The benefit that comes with this pattern is that our components become a dummy representation of the store’s data. 
// There is only one source of truth and this makes development easier. 


🏹 🏹 🏹 🏹 🏹 🏹 
// Architecture and Main 

// Redux is a library that acts as a state container and helps to manage your application data flow. 
// It was introduced back in 2015 at ReactEurope conference by "Dan Abramov".


// Similar to Flux architecture we have the view components (React) dispatching an action. 
// Same action may be dispatched by another part of our system. Like a bootstrap logic for example. 
// This action is dispatched not to a central hub but directly to the store. 
// We are saying “store” not “stores” because there is only one in Redux. 
// That is one of the big differences between Flux and Redux. 
// The logic that decided how our data changes lives in pure functions called reducers. 
// Once the store receives an action it asks the reducers about the new version of the state by sending the current state and the given action. 
// Then in immutable fashion the reducer needs to return the new state. The store continues from there and updates its internal state. 
// As a final step, the React component wired to the store gets re-rendered

// The concept is pretty linear and again follows the one-direction data flow.


🏹 🏹 🏹 🏹 🏹 🏹 
// Wiring to React components 

// If we talk about Redux in the context of React we almost always mean react-redux module. 
// It provides two things that help connecting Redux to our components.

// "<Provider>" component - it’s a component that accepts our store 
// and makes it available for the children down the React tree via the React’s context API. For example:

<Provider store={ myStore }>
  <MyApp />
</Provider>
// We usually have a single place in our app where we use it.

// "connect" function - it is a function that does the subscribing for updates in the store and re-renders our component. 
// It implements a higher-order component. Here is its signature:
connect(
    [mapStateToProps],
    [mapDispatchToProps],
    [mergeProps],
    [options]
  ) 

// "mapStateToProps" parameter is a function that accepts the current state and must return a set of key-value 
// pairs (an object) that are being sent as props to our React component. For example:
const mapStateToProps = state => ({
    visible: state.visible
  });

//   "mapDispatchToProps" is a similar one but instead of the state, it receives a dispatch function. 
//   Here is the place where we can define a prop for dispatching actions.
const mapDispatchToProps = dispatch => ({
    changeVisibility: value => dispatch(changeVisibility(value))
  });

//   "mergeProps" combines both mapStateToProps and mapDispatchToProps. 
//   The props sent to the component gives us the opportunity to accumulate better props. 
//   Like for example if we need to fire two actions we may combine them to a single prop and send that to React. 
//   "options" accepts couple of settings that control how the connection works. 



🏹 🏹 🏹 🏹 🏹 🏹 
// Selectors 

// we know that our state is usually divided into different parts. 
// We have dedicated reducers to update the data but when it comes to fetching it we still have a single object. 
// Here is the place where the selectors come in handy. 
// The selector is a function that accepts the whole state object and extracts only the information that we need. 
// For example in our small app we need two of those:
const getCounterValue = state => state.counter.value;
const getVisibility = state => state.visible;
// Selectors come with this stuff but they are also contextual and may contain logic. 
// Since they have access to the whole state they are able to answer business logic related questions. 
// Like for example “Is the user authorized to do X while being on page Y”. 
// This may be done in a single selector.
function App({ visible }) {
    return (
      <div>
        <VisibilityConnected />
        { visible && <CounterConnected /> }
      </div>
    );
  }
  const AppConnected = connect(
    state => ({
      visible: getVisibility(state)
    })
  )(App);
//   "getVisibility" selector returns a boolean that indicates whether CounterConnected will be rendered or not.